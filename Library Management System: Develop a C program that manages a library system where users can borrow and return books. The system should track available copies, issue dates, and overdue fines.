#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_BOOKS 100
#define MAX_USERS 100

// Structure to store book information
struct Book {
    int bookID;
    char title[100];
    int totalCopies;
    int availableCopies;
};

// Structure to store user information
struct User {
    int userID;
    char name[100];
    int borrowedBookID;
    struct tm issueDate;
};

// Function prototypes
void displayBooks(struct Book books[], int bookCount);
int borrowBook(struct Book books[], int bookCount, struct User *user);
void returnBook(struct Book books[], int bookCount, struct User *user);
int calculateFine(struct tm issueDate);
void displayUserInfo(struct User user);

int main() {
    struct Book books[MAX_BOOKS] = {
        {1, "The Great Gatsby", 5, 5},
        {2, "1984", 3, 3},
        {3, "To Kill a Mockingbird", 4, 4},
        {4, "Pride and Prejudice", 6, 6}
    };
    int bookCount = 4;
    struct User users[MAX_USERS];
    int userCount = 0;
    int option;
    int currentUserID = -1;

    while (1) {
        printf("\nLibrary Management System\n");
        printf("1. Register User\n");
        printf("2. Display Books\n");
        printf("3. Borrow Book\n");
        printf("4. Return Book\n");
        printf("5. Display User Info\n");
        printf("6. Exit\n");
        printf("Enter your option: ");
        scanf("%d", &option);

        switch (option) {
            case 1:
                {
                    printf("\nEnter User ID: ");
                    scanf("%d", &users[userCount].userID);
                    printf("Enter User Name: ");
                    getchar();  // to consume newline from previous input
                    fgets(users[userCount].name, 100, stdin);
                    users[userCount].name[strcspn(users[userCount].name, "\n")] = '\0'; // Remove newline
                    users[userCount].borrowedBookID = -1;
                    currentUserID = users[userCount].userID;
                    userCount++;
                    printf("User registered successfully!\n");
                }
                break;
            case 2:
                displayBooks(books, bookCount);
                break;
            case 3:
                if (currentUserID == -1) {
                    printf("Please register as a user first.\n");
                } else {
                    struct User *currentUser = NULL;
                    for (int i = 0; i < userCount; i++) {
                        if (users[i].userID == currentUserID) {
                            currentUser = &users[i];
                            break;
                        }
                    }
                    borrowBook(books, bookCount, currentUser);
                }
                break;
            case 4:
                if (currentUserID == -1) {
                    printf("Please register as a user first.\n");
                } else {
                    struct User *currentUser = NULL;
                    for (int i = 0; i < userCount; i++) {
                        if (users[i].userID == currentUserID) {
                            currentUser = &users[i];
                            break;
                        }
                    }
                    returnBook(books, bookCount, currentUser);
                }
                break;
            case 5:
                if (currentUserID == -1) {
                    printf("Please register as a user first.\n");
                } else {
                    struct User *currentUser = NULL;
                    for (int i = 0; i < userCount; i++) {
                        if (users[i].userID == currentUserID) {
                            currentUser = &users[i];
                            break;
                        }
                    }
                    displayUserInfo(*currentUser);
                }
                break;
            case 6:
                printf("Exiting the system...\n");
                exit(0);
            default:
                printf("Invalid option. Please try again.\n");
        }
    }
    return 0;
}

void displayBooks(struct Book books[], int bookCount) {
    printf("\nAvailable Books in the Library:\n");
    for (int i = 0; i < bookCount; i++) {
        printf("Book ID: %d\n", books[i].bookID);
        printf("Title: %s\n", books[i].title);
        printf("Total Copies: %d\n", books[i].totalCopies);
        printf("Available Copies: %d\n", books[i].availableCopies);
        printf("---------------------------\n");
    }
}

int borrowBook(struct Book books[], int bookCount, struct User *user) {
    if (user->borrowedBookID != -1) {
        printf("You have already borrowed a book. Return it before borrowing another.\n");
        return 0;
    }

    int bookID;
    printf("Enter the book ID you want to borrow: ");
    scanf("%d", &bookID);

    // Find the book with the given ID
    int bookIndex = -1;
    for (int i = 0; i < bookCount; i++) {
        if (books[i].bookID == bookID) {
            bookIndex = i;
            break;
        }
    }

    if (bookIndex == -1) {
        printf("Invalid Book ID.\n");
        return 0;
    }

    if (books[bookIndex].availableCopies > 0) {
        books[bookIndex].availableCopies--;
        user->borrowedBookID = bookID;

        time_t t = time(NULL);
        user->issueDate = *localtime(&t);
        printf("Book borrowed successfully! The issue date is: %s", asctime(&user->issueDate));
        return 1;
    } else {
        printf("Sorry, this book is currently unavailable.\n");
        return 0;
    }
}

void returnBook(struct Book books[], int bookCount, struct User *user) {
    if (user->borrowedBookID == -1) {
        printf("You haven't borrowed any book yet.\n");
        return;
    }

    int bookID = user->borrowedBookID;
    int bookIndex = -1;
    for (int i = 0; i < bookCount; i++) {
        if (books[i].bookID == bookID) {
            bookIndex = i;
            break;
        }
    }

    if (bookIndex == -1) {
        printf("Invalid Book ID.\n");
        return;
    }

    // Calculate fine if the book is overdue
    int fine = calculateFine(user->issueDate);
    printf("You have returned the book late. Fine: $%d\n", fine);

    books[bookIndex].availableCopies++;
    user->borrowedBookID = -1;  // Clear borrowed book ID
    printf("Book returned successfully!\n");
}

int calculateFine(struct tm issueDate) {
    time_t now = time(NULL);
    struct tm *currentTime = localtime(&now);

    // Calculate the number of overdue days
    int overdueDays = difftime(now, mktime(&issueDate)) / (60 * 60 * 24);

    if (overdueDays > 0) {
        return overdueDays * 1;  // $1 fine per day
    }
    return 0;
}

void displayUserInfo(struct User user) {
    printf("\nUser Info:\n");
    printf("User ID: %d\n", user.userID);
    printf("Name: %s\n", user.name);
    if (user.borrowedBookID != -1) {
        printf("Borrowed Book ID: %d\n", user.borrowedBookID);
        printf("Issue Date: %s", asctime(&user.issueDate));
    } else {
        printf("No borrowed books.\n");
    }
}
